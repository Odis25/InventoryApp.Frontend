@page "/employee/{id}/details"

@using InventoryApp.Frontend.Models.Employee
@using InventoryApp.Frontend.Models.Checkout

@inject IHttpClientFactory HttpClientFactory
@inject IDialogService DialogService
@inject NavigationManager Navigation

@if (Employee == null)
{
    <MudText Class="my-16" Align="Align.Center" Typo="Typo.h5" GutterBottom="true">Загрузка...</MudText>
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Style="background: #424242;" Class="d-flex align-center justify-center mud-width-full py-2 mt-4 shades-text text-white">
                <MudText Align="Align.Center" Typo="Typo.h5" GutterBottom="true">Детализация</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudCard Style="height:100%">
                <MudCardHeader Class="pl-8">
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Сотрудник</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <AuthorizeView Roles="Admin">
                            <MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Default">
                                <MudMenuItem @onclick="EditEmployee"><MudIcon Class="mr-2 mb-n1" Icon="@Icons.Filled.Edit" Color="Color.Default" />Редактировать</MudMenuItem>
                                <MudMenuItem @onclick="DeleteEmployee"><MudIcon Class="mr-2 mb-n1" Icon="@Icons.Filled.Delete" Color="Color.Default" />Удалить</MudMenuItem>
                            </MudMenu>
                        </AuthorizeView>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Class="px-8">
                    <MudPaper Elevation="4" Class="pa-4">
                        @if (_readonly)
                        {
                            <MudField Label="Фамилия" Variant="Variant.Text">@Employee.LastName</MudField>
                            <MudField Label="Имя" Variant="Variant.Text">@Employee.Name</MudField>
                            <MudField Label="Отчество" Variant="Variant.Text">@Employee.Patronymic</MudField>
                            <MudField Label="Департамент" Variant="Variant.Text">@Employee.Department.Name</MudField>
                        }
                        else
                        {
                            <MudForm @ref="_form">
                                <MudTextField Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Edit" @bind-Value="Command.LastName" Label="Фамилия" Variant="Variant.Text" For="() => Command.LastName" />
                                <MudTextField Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Edit" @bind-Value="Command.Name" Label="Имя" Variant="Variant.Text" For="() => Command.Name" />
                                <MudTextField Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Edit" @bind-Value="Command.Patronymic" Label="Отчество" Variant="Variant.Text" For="() => Command.Patronymic" />

                                <MudSelect ToStringFunc="convertFunc"
                                           Label="Департамент"
                                           Variant="Variant.Text"
                                           For="()=> Command.Department"
                                           @bind-Value="Command.Department">

                                    @foreach (var item in Departments)
                                            {
                                        <MudSelectItem Value="@item">@item.Name</MudSelectItem>
                                            }
                                </MudSelect>
                            </MudForm>
                        }
                    </MudPaper>
                </MudCardContent>
                <MudCardActions Class="justify-end align-center pr-6">
                    @if (!_readonly)
                    {
                        <MudButton StartIcon="@Icons.Filled.Save" Class="mr-2 mb-2" Variant="Variant.Filled" OnClick="Submit" Color="Color.Success">Сохранить</MudButton>
                    }
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="6">
            <MudCard Style="height:100%">
                <MudCardHeader Class="pl-8">
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">История использования:</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <AuthorizeView Roles="Admin">
                            <MudMenu OffsetX="true" Direction="Direction.Left" Icon="@Icons.Material.Filled.Settings" Color="Color.Default">
                                <MudMenuItem OnClick="CheckinDevice"><MudIcon Class="mr-2 mb-n1" Icon="@Icons.Filled.KeyboardTab" Color="Color.Default" />Выдать оборудование</MudMenuItem>
                                <MudMenuItem OnClick="CheckinCable"><MudIcon Class="mr-2 mb-n1" Icon="@Icons.Filled.KeyboardTab" Color="Color.Default" />Выдать кабель</MudMenuItem>
                            </MudMenu>
                        </AuthorizeView>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Class="px-8">
                    <MudTabs Color="Color.Dark" Rounded="true" ApplyEffectsToContainer="true">
                        <MudTabPanel Icon="@Icons.Filled.Build" Text="Оборудование">
                            <MudSimpleTable Elevation="4" Dense="true" FixedHeader="true" Style="height:520px">
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th>Выдано</th>
                                        <th>Возвращено</th>
                                        <th>Оборудование</th>
                                        <AuthorizeView Roles="Admin">
                                            <th></th>
                                        </AuthorizeView>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{var checkouts = Employee.DeviceCheckouts; }
                                    @for (int i = 0; i < checkouts.Count; i++)
                                    {
                                        var id = checkouts[i].Device.Id;
                                        <tr>
                                            <td>@(i+1)</td>
                                            <td>@checkouts[i].CheckedIn</td>
                                            <td>@checkouts[i].CheckedOut</td>
                                            @{
                                                var title = $"{checkouts[i].Device.Name} {checkouts[i].Device.Model}";
                                                var href = $"/device/{checkouts[i].Device.Id}/details";
                                            }
                                            <td><MudLink Color="Color.Info" Href="@href">@title</MudLink></td>
                                            @{ var hasCheckout = checkouts[i].CheckedOut.HasValue;}
                                            <AuthorizeView Roles="Admin">
                                                <td>
                                                    @if (!hasCheckout)
                                                    {
                                                        <MudTooltip Text="Забрать">
                                                            <MudIconButton Class="ma-2" Icon="@Icons.Filled.Close" Size="Size.Small" OnClick="() => CheckoutDevice(id)" />
                                                        </MudTooltip>
                                                    }
                                                </td>
                                            </AuthorizeView>
                                        </tr>
                                    }
                                </tbody>
                            </MudSimpleTable>
                        </MudTabPanel>
                        <MudTabPanel Icon="@Icons.Filled.ElectricalServices" Text="Кабели">
                            <MudSimpleTable Elevation="4" Dense="true" FixedHeader="true" Style="height:520px">
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th>Выдано</th>
                                        <th>Возвращено</th>
                                        <th>Кабель</th>
                                        <AuthorizeView Roles="Admin">
                                            <th></th>
                                        </AuthorizeView>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{var checkouts = Employee.CableCheckouts; }
                                    @for (int i = 0; i < checkouts.Count; i++)
                                    {
                                        var id = checkouts[i].Cable.Id;
                                        <tr>
                                            <td>@(i+1)</td>
                                            <td>@checkouts[i].CheckedIn</td>
                                            <td>@checkouts[i].CheckedOut</td>
                                            @{
                                                var title = $"{checkouts[i].Cable.Name} {checkouts[i].Cable.Mark}";
                                                var href = $"/cable/{checkouts[i].Cable.Id}/details";
                                            }
                                            <td><MudLink Color="Color.Info" Href="@href">@title</MudLink></td>
                                            @{ var hasCheckout = checkouts[i].CheckedOut.HasValue;}
                                            <AuthorizeView Roles="Admin">
                                                <td>
                                                    @if (!hasCheckout)
                                                    {
                                                        <MudTooltip Text="Забрать">
                                                            <MudIconButton Class="ma-2" Icon="@Icons.Filled.Close" Size="Size.Small" OnClick="() => CheckoutCable(id)" />
                                                        </MudTooltip>
                                                    }
                                                </td>
                                            </AuthorizeView>
                                        </tr>
                                    }
                                </tbody>
                            </MudSimpleTable>
                        </MudTabPanel>
                    </MudTabs>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
}

@code{

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public string Id { get; set; }

    private HttpClient _httpClient;
    private MudForm _form;

    private bool _readonly = true;

    public EmployeeDetailsVm Employee { get; set; }
    public UpdateEmployeeCommand Command { get; set; }
    public List<DepartmentDto> Departments { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;

        if (authState.User.Identity.IsAuthenticated)
        {
            _httpClient = HttpClientFactory.CreateClient("API");
        }
        else
        {
            _httpClient = HttpClientFactory.CreateClient("Unauthorized");
        }
        await UpdateData();
    }

    private async Task UpdateData()
    {
        Employee = await _httpClient.GetFromJsonAsync<EmployeeDetailsVm>($"api/employee/{int.Parse(Id)}");
    }

    private async Task Submit()
    {
        _form.Validate();

        if (_form.IsValid)
        {
            var result = await _httpClient.PutAsJsonAsync("api/employee", Command);

            if (result.IsSuccessStatusCode)
            {
                await UpdateData();
                _readonly = true;
            }
        }
    }

    private async Task EditEmployee()
    {
        var departments = await _httpClient.GetFromJsonAsync<DepartmentsListVm>("api/employee/departments");

        Departments = departments.Departments;

        Command = new UpdateEmployeeCommand
        {
            Id = Employee.Id,
            Name = Employee.Name,
            LastName = Employee.LastName,
            Patronymic = Employee.Patronymic,
            Department = Employee.Department
        };

        _readonly = !_readonly;
    }

    private async Task DeleteEmployee()
    {
        var result = await DialogService.ShowMessageBox(
            title: "Удаление сотрудника",
            message: "Вы уверены что хотите удалить этого сотрудника?",
            yesText: "Да",
            cancelText: "Нет");

        if (result.Value == true)
        {
            var deviceTypes = await _httpClient.DeleteAsync($"api/employee/{Employee.Id}");
            Navigation.NavigateTo("/employee");
        }
    }

    private async Task CheckinDevice()
    {
        var options = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };

        var parameters = new DialogParameters();

        var dialog = DialogService.Show<SelectDevices>("", options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var idList = (IList<int>)result.Data;

            var command = new CheckinDeviceCommand
            {
                DevicesId = idList,
                EmployeeId = Employee.Id
            };

            await _httpClient.PostAsJsonAsync("api/device/checkin", command);
            await UpdateData();
        }
    }

    private async Task CheckinCable()
    {
        var options = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };

        var parameters = new DialogParameters();

        var dialog = DialogService.Show<SelectCables>("", options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var idList = (IList<int>)result.Data;

            var command = new CheckinCableCommand
            {
                CablesId = idList,
                EmployeeId = Employee.Id
            };

            await _httpClient.PostAsJsonAsync("api/cable/checkin", command);
            await UpdateData();
        }
    }

    private async Task CheckoutDevice(int deviceId)
    {
        var result = await DialogService.ShowMessageBox(title: "Возврат оборудования",
            message: "Вы уверены что хотите забрать оборудование у сотрудника?",
            yesText: "Да",
            cancelText: "Нет");

        if (result.HasValue == true)
        {
            var command = new CheckoutDeviceCommand { DeviceId = deviceId };
            await _httpClient.PostAsJsonAsync("api/device/checkout", command);
            await UpdateData();
        }
    }

    private async Task CheckoutCable(int cableId)
    {
        var result = await DialogService.ShowMessageBox(title: "Возврат кабеля",
            message: "Вы уверены что хотите забрать кабель у сотрудника?",
            yesText: "Да",
            cancelText: "Нет");

        if (result.HasValue == true)
        {
            var command = new CheckoutCableCommand { CableId = cableId };
            await _httpClient.PostAsJsonAsync("api/cable/checkout", command);
            await UpdateData();
        }
    }

    private Func<DepartmentDto, string> convertFunc = dt => dt?.Name;
}